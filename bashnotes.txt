cat /etc/shells  -> shows all shells present in system
which bash -> display bash path

add bash path to all script files we are making


***********************************
********** First Script ***********
********* helloScript.sh **********


create file -> touch helloScript.sh

add below lines

#! /bin/bash

echo "Hello bash script"

save and quit
check executable permission with ls -al
if not then add executable permission by chmod +x helloScript.sh
then run the script by ./helloScript.sh
it will print following line
Hello bash script

***********************************

** redirect to fil

#! /bin/bash

echo "Redirect to file" > file.txt

***********************************

** take input and redirect to file1.txt

#! /bin/bash

cat > file1.txt -> replace text in file1

+ cat >> file1.txt -> appends without replace in file1

***********************************

** comments

starts with # for single line comment

: ' rghejogr '  -> multiline comment

to show comments on output use heredocdelimiter use following :

cat << startcomment
this two lines of codes will be display as comment in output
it starts and ends with same name
startcomment

***********************************

** conditional statements

-eq ->equal
-ne -> not equal
-gt ->greater than

#! /bin/bash

count=5

#if 
if [ $count -eq 10  ]
then 
	echo "condition is true"
fi

#if else
if (( $count > 10 ))
then 
	echo "condition is true"
else 
	echo "condition is false"
fi

#if else if
if (( $count > 10 ))
then 
	echo "condition is true"
elif (( $count <= 9 ))
then
	echo "condition is true"
else
	echo "condition is false"
fi

# and operator
age=10
#if [[ "$age" -gt 18  &&  "$age" -lt 40 ]] same
#if [ "$age" -gt 18  -a  "$age" -lt 40 ] same
if [ "$age" -gt 18 ] && [ "$age" -lt 40 ]
then 
	echo "Age is correct"
else
	echo "Age is not correct"
fi


# or operator
age=25
#if [[ "$age" -gt 18  ||  "$age" -lt 40 ]] same
#if [ "$age" -gt 18  -o  "$age" -lt 40 ] same
if [ "$age" -gt 18 ] || [ "$age" -lt 40 ]
then 
	echo "Age is correct"
else
	echo "Age is not correct"
fi

************************************
** loop 

#! /bin/bash

# while loop -> loop runs until value is true
number=1
while [ $number -lt 10 ]
do
	echo "$number"
	number=$(( number+1 ))
done

# until loop -> loop runs until value becomes true
num=1
until [ $num -ge 10 ]
do
	echo "$num"
	num=$(( num+1 ))
done

# for loop
for i in 1 2 3 4 5
do
	echo $i
done

# for loop
for i in {0..20}
do
	echo $i
done

# for with increament
# {start..end..increament}
for i in {0..20..2}
do
	echo $i
done

# for loop conventional
for (( i=0;i<5;i++ ))
do
	echo $i
done

# loop with break
for (( i=0;i<=10;i++ ))
do
	if [ $i -gt 5 ]
	then 
		break
	fi
	echo $i
done

# loop with continue
for (( i=0;i<=10;i++ ))
do
	if [ $i -eq 3 ] || [ $i -eq 7 ]
	then 
		continue
	fi
	echo $i
done


************************************
** script input

#! /bin/bash

: '
# prints arguments
echo $1 $2 $3

# print arguments with filename
echo $0 $1 $2 $3

# prints arguments with help of array
args=("$@")

# echo ${args[0]} ${args[1]} ${args[2]} will do same as below
# prints all argements
echo $@

# reads no of arguments passed
echo $#
'

while read line
do
	echo "$line"
done < "${1:-/dev/stdin}"

# while running this script if filename is not provided then it will print whatever we 
# type in terminal by assuming terminal as file

# if filename is provided then it will read and display file content

**************************************
** script output

#! /bin/bash

# 1> will redirect output to file3 and 2> will redirect error to file4
ls -al 1>file3.txt 2>file4.txt

**************************************
** pip

pip1.sh
#! /bin/bash

MESSAGE="Hello Linux and audience"
export MESSAGE
./pip2.sh

pip2.sh
#! /bin/bash

echo "The message from pip1 is : $MESSAGE"

run pip1.sh

**************************************
** string operations

#! /bin/bash

echo "enter 1st string"
read st1

echo "enter 2nd string"
read st2

# string matching
if [ "$st1" == "$st2" ]
then 
	echo "strings match"
else
	echo "strings not match"
fi

if [ "$st1" \< "$st2" ]
then 
	echo "st1 < st2"
elif [ "$st1" \> "$st2" ]
then
	echo "st1 > st2"
else
	echo "st1 = st2"
fi

# concatenation
c=$st1$st2

echo $c

# upper lower

echo ${st1^}
echo ${st2^^} 

***************************************
** arithmatic

#! /bin/bash

echo 31+21

n1=15
n2=30

# arithmatic
echo $(( n1 + n2 ))
echo $(( n1 - n2 ))
echo $(( n1 * n2 ))
echo $(( n1 / n2 ))
echo $(( n1 % n2 ))


# using expr
echo $(expr $n1 + $n2 )
echo $(expr $n1 - $n2 )
echo $(expr $n1 \* $n2 )
echo $(expr $n1 / $n2 )
echo $(expr $n1 % $n2 )


# hex to decimal
echo "enter hex no of ur choice"
read hex

echo -n "decimal value of $hex is : "
echo "obase=10;ibase=16; $hex" | bc


**************************************
** declare command

#! /bin/bash

# create read only variable

declare -r pwdfile=/etc/passwd

echo $pwdfile

pwdfile=/etc/abc.txt

echo $pwdfile

*************************************
** arrays 

#! /bin/bash

car=('BMW' 'Toyota' 'Honda')

# display all 
echo "${car[@]}"

# display 1st object
echo "${car[1]}"

# display index
echo "${!car[@]}"

# count total object present
echo "${#car[@]}"

unset car[2]

# display all 
echo "${car[@]}"

# display 1st object
echo "${car[1]}"

# display index
echo "${!car[@]}"

# count total object present
echo "${#car[@]}"

car[2]='Mercedez'

# display all 
echo "${car[@]}"

# display 1st object
echo "${car[1]}"

# display index
echo "${!car[@]}"

# count total object present
echo "${#car[@]}"


****************************************
** functions

#! /bin/bash

function funcName()
{
	echo "this is new functions"
}

funcName

function funcPrint()
{
	echo $1
	echo $1 $2
	echo $@
}

funcPrint hi this is argument

funcCheck()
{
	returningValue="inside function"
	echo "$returningValue"	
}

returningValue="outside function"
echo "$returningValue"	

funcCheck
echo "$returningValue"	

***************************************


