cat /etc/shells  -> shows all shells present in system
which bash -> display bash path

add bash path to all script files we are making


***********************************
********** First Script ***********
********* helloScript.sh **********


create file -> touch helloScript.sh

add below lines

#! /bin/bash

echo "Hello bash script"

save and quit
check executable permission with ls -al
if not then add executable permission by chmod +x helloScript.sh
then run the script by ./helloScript.sh
it will print following line
Hello bash script

***********************************

** redirect to fil

#! /bin/bash

echo "Redirect to file" > file.txt

***********************************

** take input and redirect to file1.txt

#! /bin/bash

cat > file1.txt -> replace text in file1

+ cat >> file1.txt -> appends without replace in file1

***********************************

** comments

starts with # for single line comment

: ' rghejogr '  -> multiline comment

to show comments on output use heredocdelimiter use following :

cat << startcomment
this two lines of codes will be display as comment in output
it starts and ends with same name
startcomment

***********************************

** conditional statements

-eq ->equal
-ne -> not equal
-gt ->greater than

#! /bin/bash

count=5

#if 
if [ $count -eq 10  ]
then 
	echo "condition is true"
fi

#if else
if (( $count > 10 ))
then 
	echo "condition is true"
else 
	echo "condition is false"
fi

#if else if
if (( $count > 10 ))
then 
	echo "condition is true"
elif (( $count <= 9 ))
then
	echo "condition is true"
else
	echo "condition is false"
fi

# and operator
age=10
#if [[ "$age" -gt 18  &&  "$age" -lt 40 ]] same
#if [ "$age" -gt 18  -a  "$age" -lt 40 ] same
if [ "$age" -gt 18 ] && [ "$age" -lt 40 ]
then 
	echo "Age is correct"
else
	echo "Age is not correct"
fi


# or operator
age=25
#if [[ "$age" -gt 18  ||  "$age" -lt 40 ]] same
#if [ "$age" -gt 18  -o  "$age" -lt 40 ] same
if [ "$age" -gt 18 ] || [ "$age" -lt 40 ]
then 
	echo "Age is correct"
else
	echo "Age is not correct"
fi

************************************
** loop 

#! /bin/bash

# while loop -> loop runs until value is true
number=1
while [ $number -lt 10 ]
do
	echo "$number"
	number=$(( number+1 ))
done

# until loop -> loop runs until value becomes true
num=1
until [ $num -ge 10 ]
do
	echo "$num"
	num=$(( num+1 ))
done

# for loop
for i in 1 2 3 4 5
do
	echo $i
done

# for loop
for i in {0..20}
do
	echo $i
done

# for with increament
# {start..end..increament}
for i in {0..20..2}
do
	echo $i
done

# for loop conventional
for (( i=0;i<5;i++ ))
do
	echo $i
done

# loop with break
for (( i=0;i<=10;i++ ))
do
	if [ $i -gt 5 ]
	then 
		break
	fi
	echo $i
done

# loop with continue
for (( i=0;i<=10;i++ ))
do
	if [ $i -eq 3 ] || [ $i -eq 7 ]
	then 
		continue
	fi
	echo $i
done


************************************
** script input

#! /bin/bash

: '
# prints arguments
echo $1 $2 $3

# print arguments with filename
echo $0 $1 $2 $3

# prints arguments with help of array
args=("$@")

# echo ${args[0]} ${args[1]} ${args[2]} will do same as below
# prints all argements
echo $@

# reads no of arguments passed
echo $#
'

while read line
do
	echo "$line"
done < "${1:-/dev/stdin}"

# while running this script if filename is not provided then it will print whatever we 
# type in terminal by assuming terminal as file

# if filename is provided then it will read and display file content

**************************************



